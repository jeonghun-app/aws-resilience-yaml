Resources:
    DRVPC:
        Type: "AWS::EC2::VPC"
        Properties:
            CidrBlock: "172.31.0.0/16"
            EnableDnsSupport: "true"
            EnableDnsHostnames: "true"
            Tags:
                - Key: Name
                  Value: DRVPC
            InstanceTenancy: default

    InternetGateway:
        Type: "AWS::EC2::InternetGateway"
        Properties:
            Tags:
                - Key: Name
                  Value: DRInternetGateway

    AttachGateway:
        Type: "AWS::EC2::VPCGatewayAttachment"
        Properties:
            VpcId: !Ref DRVPC
            InternetGatewayId: !Ref InternetGateway

    PublicRouteTable:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref DRVPC
            Tags:
                - Key: Name
                  Value: PublicRouteTable

    PublicRoute:
        Type: "AWS::EC2::Route"
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: "0.0.0.0/0"
            GatewayId: !Ref InternetGateway

    PublicSubnetARouteTableAssociation:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            SubnetId: !Ref PublicSubnetA
            RouteTableId: !Ref PublicRouteTable

    PublicSubnetA:
        Type: "AWS::EC2::Subnet"
        Properties:
            CidrBlock: "172.31.0.0/26"
            VpcId: !Ref DRVPC
            AvailabilityZone: "ap-northeast-2a"
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: PublicSubnetA

    PrivateSubnetA:
        Type: "AWS::EC2::Subnet"
        Properties:
            CidrBlock: "172.31.64.0/26"
            VpcId: !Ref DRVPC
            AvailabilityZone: "ap-northeast-2a"
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: PrivateSubnetA

    PrivateSubnetTRGW:
        Type: "AWS::EC2::Subnet"
        Properties:
            CidrBlock: "172.31.128.0/26"
            VpcId: !Ref DRVPC
            AvailabilityZone: "ap-northeast-2a"
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: PrivateSubnetTRGW

    WebServer:
        Type: "AWS::EC2::Instance"
        Properties:
            InstanceType: "c5.large"
            ImageId: !Ref "AmazonLinuxAMI"
            SubnetId: !Ref "PublicSubnetA"
            SecurityGroupIds:
                - !Ref WebServerSecurityGroup
            IamInstanceProfile: !Ref WebServerInstanceProfile
            UserData:
                Fn::Base64: |
                    #!/bin/bash
                    sudo dnf update -y
                    sudo dnf install -y nginx git
                    sudo systemctl enable nginx
                    sudo systemctl start nginx
                    git clone https://github.com/simjh0919/DRWeb-AWS.git /home/ec2-user/web
                    /home/ec2-user/web/start.sh ${WASServer_PrivateIpAddress}
            Tags:
                - Key: Name
                  Value: WebServer

    WebServerSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Allow traffic for WebServer"
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: "0.0.0.0/0"
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: "0.0.0.0/0"
            VpcId: !Ref DRVPC

    WebServerInstanceProfile:
        Type: "AWS::IAM::InstanceProfile"
        Properties:
            Roles:
                - !Ref WebServerRole

    WebServerRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: ec2.amazonaws.com
                      Action: sts:AssumeRole
            Policies:
                - PolicyName: SSMAccess
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: Allow
                            Action:
                                - "ssm:DescribeInstanceInformation"
                                - "ssm:GetCommandInvocation"
                                - "ssm:ListCommandInvocations"
                                - "ssm:ListCommands"
                                - "ssm:SendCommand"
                                - "ssm:StartSession"
                                - "ssm:TerminateSession"
                                - "ssm:UpdateInstanceInformation"
                                - "ssmmessages:CreateControlChannel"
                                - "ssmmessages:CreateDataChannel"
                                - "ssmmessages:OpenControlChannel"
                                - "ssmmessages:OpenDataChannel"
                            Resource: "*"
                - PolicyName: EC2InstanceConnect
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: Allow
                            Action:
                                - "ec2-instance-connect:SendSSHPublicKey"
                            Resource: "*"

Parameters:
    AmazonLinuxAMI:
        Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
        Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64"
